Imagiro is an attempt to make Bayesian Iterative unfolding easier

	- Lots of built in tests to try and avoid any serious pitfalls
	- Results straight onto plots, with statistical and systematic errors
	- Designed to work with many different MC samples at once

________________________________
Installation

	Assuming that Root is properly set up on your machine (crucially the LD_LIBRARY_PATH environment variable must be set correctly) then just type "make" with your terminal pointed at the Imagiro root directory.
The Makefile should work with most destop Linux (including SLC5) and Mac OSX. The binary will be produced in the bin directory.

________________________________
Use

	If you try and run the binary straight away (i.e. by just typing bin/imagiro) then chances are it will crash. First you must edit src/main.cpp and src/MonteCarloInformation.cpp to specify the locations of input files.
Imagiro expects 2 input files per MC sample (one for truth, one for reconstructed), each containing an nTuple with branches called "EventNumber" and "EventWeight", and a branch for each variable to unfold.
There must also be a similar input file for the data to unfold. The code will look like this:

InputNtuple * dataNtuple = new InputNtuple( "data/user.bwynne.LeadingJetModifiedv3.Data.CaloJet/mergedFile.root", "benTuple", "7TeVData" );

	- The first argument is the path to the input file
	- The second argument is the location of the nTuple within the file
	- The third argument should describe the input (for setting titles on plots, and debug messages)

Also in src/main.cpp you must specify the plots you with to make. The code will look like this:

XvsYNormalisedPlotMaker * pTvsNChargedTowardPlot = new XvsYNormalisedPlotMaker( "MaxJetPt", "NChargeToward", "Pythia6", jetPtBins, jetPtMin, jetPtMax, nChargeBins, nChargeMin, nChargeMax, scaleFactor );

	- The first two arguments are the names of the variables to unfold
	- The third argument describes the MC model - essentially just a dummy (see below)
	- The fourth-ninth arguments describe the binning of each variable
	- The tenth argument can be a number to scale the y-variable by (eg the detector acceptance)

Having set up a plot for one MC model, feed this to a MonteCarloSummaryPlotMaker and it will repeat the process for all the other MC samples:

allPlotMakers.push_back( new MonteCarloSummaryPlotMaker( pTvsNChargedTowardPlot, mcInfo, 0.0, 3.0, true ) );

	- The first argument is the plot you specified above
	- The second argument is the object that holds all the locations of all the MC inputs
	- The third and fourth arguments are optional, setting the range of the y-axis
	- The fifth argument sets whether all MC information should be combined into one smearing matrix, or if a separate matrix should be used for each sample ("true" to combine the MC is recommended).

The available plot types are XPlotmaker, XvsYNormalisedPlotMaker, XFolding and XvsYNormalisedFolding. These are for unfolding or folding (i.e. applying a smearing matrix to) 1D or 2D distributions.

Make all these changes, compile, and run. With any luck, you will eventually get a file called "UnfoldedFinal.root" containing the plots you wanted.

________________________________
Tests

	Binning the variable on the y-axis of a plot can potentially introduce errors. The 2D unfolded distributions compare the MC truth distributions (which are not affected by unfolding) with the corresponding
truth distribution without the y-axis binning. The error arising will be quoted like this:

Average bin error from delinearisation: 0%

	Unfolding a reconstructed MC sample should exactly reproduce the corresponding truth distribution. This is checked for each unfolding, and the results are quoted like this:

Closure test passed: chi squared = 0.818614 and K-S probability = 0.998914

	The unfolding iterations cease when the results of two iterations are sufficiently similar, or if the maximum allowed number of iterations is reached. Results are quoted like this,
although it is not necessarily a problem if it does not converge:

Converged: KS 0.98612 > 0.902129
